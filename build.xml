<project name="klon" default="grammar.generate.grammatica">

	<property name="src" value="src/main/java" />
	<property name="classes" value="target/classes" />
	<property name="grammar" value="src/main/grammatica" />
	<property name="grammar.classes" value="target/grammar-classes" />
	<property name="test" value="src/main/test" />
	<property name="test.classes" value="target/test-classes" />
	<property name="coverage.classes" value="target/coverage-classes" />
	<property name="lib" value="lib" />
	<property name="docs" value="target/docs" />
	<property name="docs.generated" value="target/docs-generated" />

	<path id="classpath">
		<pathelement path="${classes}" />
		<pathelement path="${grammar.classes}" />
		<filelist dir="${lib}">
			<file name="antlr/jars/antlr-2.7.5.jar" />
			<file name="checkstyle/jars/checkstyle-4.0-beta4.jar" />
			<file name="commons-beanutils/jars/commons-beanutils-1.7.0.jar" />
			<file name="commons-logging/jars/commons-logging-1.0.3.jar" />
			<file name="regexp/jars/regexp-1.3.jar" />
			<file name="grammatica/jars/grammatica-1.5.alpha1.jar" />
			<file name="junit/jars/junit-3.8.1.jar" />
			<file name="emma/jars/emma.jar" />
			<file name="emma/jars/emma_ant.jar" />
		</filelist>
	</path>

	<taskdef resource="checkstyletask.properties">
		<classpath refid="classpath" />
	</taskdef>

	<taskdef name="grammatica" classname="net.percederberg.grammatica.ant.GrammaticaTask">
		<classpath refid="classpath" />
	</taskdef>

	<taskdef resource="emma_ant.properties">
		<classpath refid="classpath" />
	</taskdef>

	<target name="clean">
		<delete dir="target" />
	</target>

	<target name="grammar.generate.grammatica">
		<grammatica grammar="${grammar}/klon.grammar">
			<java dir="${grammar}" package="klon.grammar.grammatica" public="true" />
		</grammatica>
	</target>

	<target name="checkstyle.report">
		<mkdir dir="${docs.generated}" />
		<checkstyle config="checkstyle_checks.xml" failOnViolation="false" failureProperty="audit.failed">
			<formatter type="xml" tofile="${docs.generated}/checkstyle-report.xml" />
			<fileset dir="${src}" includes="**/*.java" />
		</checkstyle>
		<path id="src.id" path="${src}" />
		<pathconvert pathsep="," property="src.parameter" refid="src.id" />
		<style in="${docs.generated}/checkstyle-report.xml" out="${docs}/checkstyle-report.html" style="checkstyle-noframes-sorted.xsl">
			<param name="src" expression="${src.parameter}" />
		</style>
		<copy file="style/maven-base.css" todir="${docs}" />
		<copy file="style/maven-theme.css" todir="${docs}" />
		<copy file="style/project.css" todir="${docs}" />
		<fail message="Audit failed." if="audit.failed" />
	</target>

	<target name="compile" depends="grammar.generate.grammatica">
		<mkdir dir="${grammar.classes}" />
		<javac fork="true" destdir="${grammar.classes}" debuglevel="lines,vars,source" debug="true" includeAntRuntime="false">
			<classpath refid="classpath" />
			<src path="${grammar}" />
		</javac>
		<mkdir dir="${classes}" />
		<javac fork="true" destdir="${classes}" debuglevel="lines,vars,source" debug="true" includeAntRuntime="false">
			<classpath refid="classpath" />
			<src path="${src}" />
		</javac>
		<!--		
				<copy todir="${classes}">
					<fileset dir="${resource}" includes="**/*.*" />
				</copy>
		-->
	</target>

	<target name="junit.compile" depends="compile">
		<mkdir dir="${test.classes}" />
		<javac destdir="${test.classes}" debuglevel="lines,vars,source" debug="true" includeAntRuntime="false">
			<classpath>
				<pathelement location="${classes}" />
				<path refid="classpath" />
			</classpath>
			<src path="${test}" />
		</javac>
	</target>

	<target name="junit.run">
		<mkdir dir="${docs.generated}" />
		<junit printsummary="on" errorProperty="test.failed" failureProperty="test.failed">
			<classpath>
				<pathelement location="${coverage.classes}" />
				<pathelement location="${test.classes}" />
				<path refid="classpath" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="true" todir="${docs.generated}">
				<fileset dir="${test.classes}" includes="**/*Test.class" />
			</batchtest>
			<sysproperty key="emma.coverage.out.file" value="${docs.generated}/coverage.emma" />
			<sysproperty key="emma.coverage.out.merge" value="true" />
			<sysproperty key="com.jcoverage.rawcoverage.dir" value="${docs.generated}" />
			<sysproperty key="coverage.data.path" value="${docs.generated}/coverage/coverage.ser" />
		</junit>
	</target>

	<target name="junit.report">
		<mkdir dir="${docs}" />
		<dirname property="junit.dir" file="${ant.file.junit}" />
		<junitreport todir="${docs.generated}">
			<fileset dir="${docs.generated}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="noframes" todir="${docs}" styledir="${junit.dir}" />
		</junitreport>
		<move file="${docs}/junit-noframes.html" tofile="${docs}/junit-report.html" />
		<copy file="style/maven-base.css" todir="${docs}" />
		<copy file="style/maven-theme.css" todir="${docs}" />
		<copy file="style/project.css" todir="${docs}" />
	</target>

	<target name="junit.evaluate">
		<fail message="Tests failed." if="test.failed" />
	</target>

	<target name="junit" depends="junit.compile, junit.run, junit.report, junit.evaluate" />

	<target name="emma.compile" depends="compile">
		<mkdir dir="${docs.generated}" />
		<mkdir dir="${coverage.classes}" />
		<emma enabled="true">
			<instr instrpath="${classes}" outdir="${coverage.classes}" mode="copy" metadatafile="${docs.generated}/metadata.emma" merge="true" />
		</emma>
	</target>

	<target name="emma.report">
		<mkdir dir="${docs}" />
		<emma enabled="true">
			<report>
				<sourcepath>
					<dirset dir="${basedir}">
						<include name="${src}" />
					</dirset>
				</sourcepath>
				<fileset dir="${docs.generated}">
					<include name="*.emma" />
				</fileset>
				<html outfile="${docs}/emma-report.html" />
			</report>
		</emma>
	</target>

	<target name="emma" depends="emma.compile, junit, emma.report" />

	<target name="jar" depends="compile">
		
		<unjar dest="target/unjar" src="lib/grammatica/jars/grammatica-1.5.alpha1.jar" />
		<move file="target/unjar/LICENSE.txt" toFile="target/unjar/grammatica-LICENSE.txt" />
		<move file="target/unjar/README.txt" toFile="target/unjar/grammatica-README.txt" />
		<move file="LICENSE.txt" toFile="target/unjar/${ant.project.name}-LICENSE.txt" />
		
		<jar destfile="${ant.project.name}.jar">
			<fileset dir="${classes}" />
			<fileset dir="${grammar.classes}" />
			<fileset dir="target/unjar" />
			<manifest>
				<attribute name="Main-Class" value="klon.Shell" />
				<attribute name="Specification-Title" value="${ant.project.name}" />
				<attribute name="Specification-Version" value="1.0" />
				<attribute name="Implementation-Title" value="${ant.project.name}" />
				<attribute name="Implementation-Version" value="1.0.0" />
			</manifest>
		</jar>
	</target>

</project>